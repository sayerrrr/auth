"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _utils = require("@resource/utils");
var _hub = require("@textile/hub");
let Mailbox = class Mailbox {
    static async createMailbox(user, config, parser) {
        const mb = new Mailbox(user, config);
        const mid = await mb.getUsersClient().setupMailbox();
        const callback = (reply)=>{
            if (!reply || !reply.message) return;
            mb.emitters.forEach(async (emitter)=>{
                if (reply.message) {
                    const dec = await mb.messageDecoder(mb.user, reply.message);
                    const parsed = await parser(dec);
                    emitter.emit('data', {
                        notification: parsed
                    });
                }
            });
        };
        mb.listener = await mb.getUsersClient().watchInbox(mid, callback);
        return mb;
    }
    subscribe(emitter) {
        this.emitters.push(emitter);
    }
    async listInboxMessages(seek, limit) {
        const res = await this.getUsersClient().listInboxMessages({
            seek,
            limit
        });
        const inbox = [];
        // eslint-disable-next-line no-restricted-syntax
        for (const msg of res){
            // eslint-disable-next-line no-await-in-loop
            const decryptedMsg = await this.messageDecoder(this.user, msg);
            inbox.push(decryptedMsg);
        }
        return inbox;
    }
    async sendMessage(to, body) {
        const toKey = (0, _utils).tryParsePublicKey(to);
        const res = await this.getUsersClient().sendMessage(this.user.identity, toKey, body);
        return res;
    }
    async deleteMessage(id) {
        await this.getUsersClient().deleteInboxMessage(id);
    }
    getUserAuth() {
        if (this.user.storageAuth === undefined) {
            throw new Error('Authentication Error');
        }
        return this.user.storageAuth;
    }
    getUsersClient() {
        return this.initUsers(this.getUserAuth());
    }
    initUsers(userAuth) {
        if (this.config?.usersInit) {
            return this.config.usersInit(userAuth);
        }
        return _hub.Users.withUserAuth(userAuth, {
            host: this.config?.textileHubAddress
        });
    }
    constructor(user1, config){
        this.user = user1;
        this.config = config;
        this.messageDecoder = async (user, message)=>{
            const identity = new _hub.PrivateKey(user.identity.privKey.slice(0, 32));
            const decryptedBody = await identity.decrypt(message.body);
            return {
                decryptedBody,
                ...message
            };
        };
        this.emitters = [];
    }
};
exports.Mailbox = Mailbox;

//# sourceMappingURL=data:application/json;base64,